#pragma config(StandardModel, "RVW SQUAREBOT")
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//
// turns machine left
void turnLeft()
{
  wait1Msec(1000);						// Robot waits for 2000 milliseconds before executing program

	// Turn Left at full power for 0.75 seconds
	motor[rightMotor] = 100;
	motor[leftMotor]  = -100;
	wait1Msec(500);
}
// find the nearest object
void findNearest()
{
  int sonar_value;      // Will hold the current reading of the sonar sensor.
	resetSensor(gyro);
  	int closestArray[18];
  
  
  	//int i=0;
  	//int n=0;

  	int length = sizeof(closestArray)/sizeof(closestArray[0]);
  	 int min = closestArray[0];
  	 
  	 // ROTATES LEFT & SCANS OBJECTS
    sonar_value = SensorValue(sonarSensor);   // Store the current reading from the Sonar Sensor to 'sonar_value'.
		if(sonar_value == 119)
		{
			wait1Msec(550);						// Robot waits for 2000 milliseconds before executing program
     for (int i = 0; i < length; i++)
       {
					turnLeft(0.04, rotations, 50);
					for (int i = 0; i < length; i++)
			   {
        //Compare elements of array with min
       			if(closestArray[i] < min)
       			{
           		min = closestArray[i];
           		writeDebugStreamLine("Int i for min : %d", min);
           	}
   			 }

					wait1Msec(100);
					closestArray[i] = SensorValue(sonarSensor);
					//writeDebugStreamLine("Int i is : %d", furthestArray[i]);
			 }
			  writeDebugStreamLine("New line!!!!!!Closest Array ^^^^");
			waitUntilMotorStop(leftMotor);


   		// GO TO CLOSEST OBJECT

   			 for (int i = 0; i < length; i++)
       {
					turnRight(0.02, rotations, 50);
					while(SensorValue(sonarSensor) == closestArray[i])
					{
						  motor[rightMotor] = 100;
							motor[leftMotor]  = 100;
							//wait1Msec(5000);						// Robot waits for 2000 milliseconds before executing program

						while(SensorValue(sonarSensor) > 20  || SensorValue(sonarSensor) == -1)		// Loop while robot's Ultrasonic sensor is further than 20 inches away from an object
							{                                                                         // || (or) it is '-1'.  (-1 is the value returned when nothing is in it's visable range)
								motor[rightMotor] = 100;
								motor[leftMotor]  = 100;
						}
					}
					//writeDebugStreamLine("Int i is : %d", furthestArray[i]);
			 }
	}
}
// goes to the first checkpoint located at bottom left corner
void checkpoint1(){
	// GO TO CHECKPOINT
	int checkPointA[18];
	int sonar_value; 

			 int checkPointALength = sizeof(checkPointA)/sizeof(checkPointA[0]);
  	 	 int max = checkPointA[0];

				sonar_value = SensorValue(sonarSensor);
			 wait1Msec(250);						// Robot waits for 2000 milliseconds before executing program
     	for (int i = 0; i < checkPointALength; i++)
       {
					turnLeft(0.08, rotations, 50);
					for (int i = 0; i < checkPointALength; i++)
			   {
        //Compare elements of array with min
       			if(checkPointA[i] < max)
       			{
           		max = checkPointA[i];
           		writeDebugStreamLine("Int i for max is : %d", max);


           	}
   			 }
   			 	wait1Msec(200);
					checkPointA[i] = SensorValue(sonarSensor);
					//writeDebugStreamLine("Int i is : %d", furthestArray[i]);
			 }
			  writeDebugStreamLine("New line!!!!!! furthest array ^^^^");
			waitUntilMotorStop(leftMotor);
			 for (int i = 0; i < checkPointALength; i++)
       {
					turnRight(0.04, rotations, 50);
					if(SensorValue[gyro] > -1150)
					{
						    motor[rightMotor] = 100;
								motor[leftMotor]  = 100;
								while(SensorValue(sonarSensor) > 20  || SensorValue(sonarSensor) == -1)		// Loop while robot's Ultrasonic sensor is further than 20 inches away from an object
							{                                                                         // || (or) it is '-1'.  (-1 is the value returned when nothing is in it's visable range)
								motor[rightMotor] = 100;
								motor[leftMotor]  = 100;
						}
					}
					//writeDebugStreamLine("Int i is : %d", furthestArray[i]);
			 }

}
// resets the gyro so the machine can rotate correctly
void resetGyro()
{
	 int checkPointA[18];
			 int checkPointALength = sizeof(checkPointA)/sizeof(checkPointA[0]); 
	 // RESET GYRO TO 0
   			for (int i = 0; i < checkPointALength; i++)
       {
					turnRight(0.04, rotations, 50);
					if(SensorValue[gyro] == 0)
					{
						    motor[rightMotor] = 100;
								motor[leftMotor]  = 100;
								while(SensorValue(sonarSensor) > 20  || SensorValue(sonarSensor) == -1)		// Loop while robot's Ultrasonic sensor is further than 20 inches away from an object
							{                                                                         // || (or) it is '-1'.  (-1 is the value returned when nothing is in it's visable range)
								motor[rightMotor] = 100;
								motor[leftMotor]  = 100;
							}
					}
					//writeDebugStreamLine("Int i is : %d", furthestArray[i]);
			 }
   			// move closer to objects
						wait1Msec(2000);
						// rotate right at
							motor[rightMotor] = -25;
							motor[leftMotor]  = 25;
						wait1Msec(1000);
					// Move forward at full power for 3 seconds
						motor[rightMotor] = 127;
						motor[leftMotor]  = 127;
						wait1Msec(1000);

						wait1Msec(2000);
					// rotate right at
							motor[rightMotor] = -25;
							motor[leftMotor]  = 25;
						wait1Msec(1000);

						motor[rightMotor] = 80;
						motor[leftMotor]  = 80;
						wait1Msec(1000);
							motor[rightMotor] = -50;
							motor[leftMotor]  = 50;
						wait1Msec(500);
}
// looks for the object thats located in the furthest distance
void findFurthest()
{
	int furthestArray[18];
	int farthestLength = sizeof(furthestArray)/sizeof(furthestArray[17]);
 	int maxObj = furthestArray[17];
     for (int i = 0; i < farthestLength; i++)
       {
					turnLeft(0.04, rotations, 80);
					for (int i = 0; i < farthestLength; i++)
			   {
        //Compare elements of array with max
       			if(furthestArray[i] < maxObj)
       			{
           		maxObj = furthestArray[i];
           		writeDebugStreamLine("Int i for actual furthest array : %d", maxObj);
           	}
   			 }

					wait1Msec(100);
					furthestArray[i] = SensorValue(sonarSensor);
					//writeDebugStreamLine("Int i is : %d", furthestArray[i]);
			 }
			  writeDebugStreamLine("New line!!!!!!actual furthest Array ^^^^");
			waitUntilMotorStop(leftMotor);
		}
// moves to the said furthest object
void goToFurthest()
{
	int furthestArray[18];
	int farthestLength = sizeof(furthestArray)/sizeof(furthestArray[17]);
		// GO TO FURTHEST OBJECT
		 for (int i = 0; i < farthestLength; i++)
       {
					turnRight(0.08, rotations, 50);
					while(SensorValue(sonarSensor) == furthestArray[i])
					{
						  motor[rightMotor] = 100;
							motor[leftMotor]  = 100;

								writeDebugStreamLine("sensor value : %d", SensorValue(sonarSensor));
						while(SensorValue(sonarSensor) > 20  || SensorValue(sonarSensor) == -1)
							{
								motor[rightMotor] = 100;
								motor[leftMotor]  = 100;
						}
					}
					//writeDebugStreamLine("Int i is : %d", furthestArray[i]);

			 }
			 
}
// scans and goes to check point 2 located top right corner
void checkPoint2()
{
	 int sonar_value;      // Will hold the current reading of the sonar sensor.
	 int checkPointA[18];
	 int checkPointB[18];
	 int checkPointBLength = sizeof(checkPointB)/sizeof(checkPointB[17]);
  	 	 int max = checkPointB[17];
	
				sonar_value = SensorValue(sonarSensor);
			 wait1Msec(250);
     	for (int i = 0; i < checkPointBLength; i++)
       {
					turnLeft(0.08, rotations, 50);
					for (int i = 0; i < checkPointBLength; i++)
			   {
        //Compare elements of array with min
       			if(checkPointB[i] < max)
       			{
           		max = checkPointB[i];
           		writeDebugStreamLine("Int i for max is : %d", max);


           	}
   			 }
   			// GYRO LOCATES BOTTOM LEFT CORNER AND GOES
					wait1Msec(200);
					checkPointA[i] = SensorValue(sonarSensor);
					//writeDebugStreamLine("Int i is : %d", furthestArray[i]);
			 }
			  writeDebugStreamLine("New line!!!!!! furthest array ^^^^");
			waitUntilMotorStop(leftMotor);
			 for (int i = 0; i < checkPointBLength; i++)
       {
					turnLeft(0.04, rotations, 80);
					if(SensorValue[gyro] > -950)
					{
						    motor[rightMotor] = 100;
								motor[leftMotor]  = 100;
								while(SensorValue(sonarSensor) > 40  || SensorValue(sonarSensor) == -1)		// Loop while robot's Ultrasonic sensor is further than 20 inches away from an object
							{                                                                         // || (or) it is '-1'.  (-1 is the value returned when nothing is in it's visable range)
								motor[rightMotor] = 100;
								motor[leftMotor]  = 100;
						}
						while(SensorValue(sonarSensor) < 40  || SensorValue(sonarSensor) != -1)		// Loop while robot's Ultrasonic sensor is further than 20 inches away from an object
							{                                                                         // || (or) it is '-1'.  (-1 is the value returned when nothing is in it's visable range)
								motor[rightMotor] = 0;
								motor[leftMotor]  = 0;
								break;
							}


					}
					//writeDebugStreamLine("Int i is : %d", furthestArray[i]);
					while(SensorValue(sonarSensor) < 40  || SensorValue(sonarSensor) != -1)		// Loop while robot's Ultrasonic sensor is further than 20 inches away from an object
							{                                                                         // || (or) it is '-1'.  (-1 is the value returned when nothing is in it's visable range)
								motor[rightMotor] = 0;
								motor[leftMotor]  = 0;
								break;
						}
			 }
	while(SensorValue(sonarSensor) < 40  || SensorValue(sonarSensor) != -1)		// Loop while robot's Ultrasonic sensor is further than 20 inches away from an object
							{                                                                         // || (or) it is '-1'.  (-1 is the value returned when nothing is in it's visable range)
								motor[rightMotor] = 0;
								motor[leftMotor]  = 0;
								break;
						}

    motor[leftMotor]  = 0;                /* Set both the left and right */
    motor[rightMotor] = 0;                /* motors to run at 'speed'.   */
}
// MAIN
task main()
{
// step 1. Scan, find, and go to the nearest object.
findNearest();
// step 2. Scan and go to checkpoint 1 using the gyro sensor.
checkpoint1();
// step 3. Reset the gyro so the machine can readjust itself.
resetGyro();
// step 4. Scan, find furthest object.
findFurthest();
// step 5. Go to the furthest object.
goToFurthest();
// step 6. Scan and go to checkpoint 2 using the gyro sensor.
checkPoint2();
// step 7. kill engine.
 motor[leftMotor]  = 0;                /* Set both the left and right */
 motor[rightMotor] = 0;                /* motors to run at 'speed'.   */

}
